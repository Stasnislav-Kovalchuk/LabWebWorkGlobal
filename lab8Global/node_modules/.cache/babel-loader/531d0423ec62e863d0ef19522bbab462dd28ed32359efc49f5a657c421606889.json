{"ast":null,"code":"var _jsxFileName = \"/Users/stanislavkovalcuk/Desktop/github/LabWebWorkGlobal/lab8Global/src/components/entities/PopUpDoctorForm/PopUpDoctorForm.tsx\";\nimport React from 'react';\nimport PopUpModalWindow from \"../../common/PopUpModalWindow/PopUpModalWindow\";\n\n// Якщо у вас немає компонента FormInput, використовуйте звичайний input\n// import FormInput from \"../../common/FormInput/FormInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopUpDoctorForm = ({\n  doctor,\n  setDoctor,\n  handleSubmit,\n  error,\n  headText,\n  active,\n  setActive\n}) => {\n  return /*#__PURE__*/_jsxDEV(PopUpModalWindow, {\n    active: active,\n    setActive: setActive,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: headText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        label: \"Name\",\n        value: doctor.name,\n        onChange: e => setDoctor({\n          ...doctor,\n          name: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        label: \"Description\",\n        value: doctor.description,\n        onChange: e => setDoctor({\n          ...doctor,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        label: \"Price\",\n        type: \"number\",\n        value: doctor.price || '',\n        onChange: e => setDoctor({\n          ...doctor,\n          price: Number(e.target.value)\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        label: \"Picture's url\",\n        value: doctor.picture,\n        onChange: e => setDoctor({\n          ...doctor,\n          picture: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: 'blue-btn small',\n        type: 'submit',\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_c = PopUpDoctorForm;\nexport default PopUpDoctorForm;\nvar _c;\n$RefreshReg$(_c, \"PopUpDoctorForm\");","map":{"version":3,"names":["React","PopUpModalWindow","jsxDEV","_jsxDEV","PopUpDoctorForm","doctor","setDoctor","handleSubmit","error","headText","active","setActive","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","label","value","name","onChange","e","target","description","type","price","Number","picture","className","_c","$RefreshReg$"],"sources":["/Users/stanislavkovalcuk/Desktop/github/LabWebWorkGlobal/lab8Global/src/components/entities/PopUpDoctorForm/PopUpDoctorForm.tsx"],"sourcesContent":["import React, { ChangeEvent, Dispatch, FC, FormEvent, SetStateAction } from 'react';\nimport PopUpModalWindow from \"../../common/PopUpModalWindow/PopUpModalWindow\";\nimport { IDoctor } from \"../../../intefaces/doctorInterfaces\";\n\n// Якщо у вас немає компонента FormInput, використовуйте звичайний input\n// import FormInput from \"../../common/FormInput/FormInput\";\n\ninterface PopUpDoctorFormProps {\n    doctor: IDoctor;\n    setDoctor: Dispatch<SetStateAction<IDoctor>>;\n    handleSubmit: (e: FormEvent) => void;\n    error: string;\n    headText: string;\n    active: boolean;\n    setActive: Dispatch<SetStateAction<boolean>>;\n}\n\nconst PopUpDoctorForm: FC<PopUpDoctorFormProps> = ({\n    doctor,\n    setDoctor,\n    handleSubmit,\n    error,\n    headText,\n    active,\n    setActive\n}) => {\n    return (\n        <PopUpModalWindow active={active} setActive={setActive}>\n            <h2>{headText}</h2>\n            <form onSubmit={handleSubmit}>\n                <input\n                    label=\"Name\"\n                    value={doctor.name}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => setDoctor({...doctor, name: e.target.value})}\n                />\n                <textarea\n                    label=\"Description\"\n                    value={doctor.description}\n                    onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setDoctor({...doctor, description: e.target.value})}\n                />\n                <input\n                    label=\"Price\"\n                    type=\"number\"\n                    value={doctor.price || ''}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => setDoctor({...doctor, price: Number(e.target.value)})}\n                />\n                <input\n                    label=\"Picture's url\"\n                    value={doctor.picture}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => setDoctor({...doctor, picture: e.target.value})}\n                />\n                <span className='error'>{error}</span>\n                <button className={'blue-btn small'} type={'submit'}>Добавити</button>\n            </form>\n        </PopUpModalWindow>\n    );\n};\n\nexport default PopUpDoctorForm;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAgE,OAAO;AACnF,OAAOC,gBAAgB,MAAM,gDAAgD;;AAG7E;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAYA,MAAMC,eAAyC,GAAGA,CAAC;EAC/CC,MAAM;EACNC,SAAS;EACTC,YAAY;EACZC,KAAK;EACLC,QAAQ;EACRC,MAAM;EACNC;AACJ,CAAC,KAAK;EACF,oBACIR,OAAA,CAACF,gBAAgB;IAACS,MAAM,EAAEA,MAAO;IAACC,SAAS,EAAEA,SAAU;IAAAC,QAAA,gBACnDT,OAAA;MAAAS,QAAA,EAAKH;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnBb,OAAA;MAAMc,QAAQ,EAAEV,YAAa;MAAAK,QAAA,gBACzBT,OAAA;QACIe,KAAK,EAAC,MAAM;QACZC,KAAK,EAAEd,MAAM,CAACe,IAAK;QACnBC,QAAQ,EAAGC,CAAgC,IAAKhB,SAAS,CAAC;UAAC,GAAGD,MAAM;UAAEe,IAAI,EAAEE,CAAC,CAACC,MAAM,CAACJ;QAAK,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChG,CAAC,eACFb,OAAA;QACIe,KAAK,EAAC,aAAa;QACnBC,KAAK,EAAEd,MAAM,CAACmB,WAAY;QAC1BH,QAAQ,EAAGC,CAAmC,IAAKhB,SAAS,CAAC;UAAC,GAAGD,MAAM;UAAEmB,WAAW,EAAEF,CAAC,CAACC,MAAM,CAACJ;QAAK,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1G,CAAC,eACFb,OAAA;QACIe,KAAK,EAAC,OAAO;QACbO,IAAI,EAAC,QAAQ;QACbN,KAAK,EAAEd,MAAM,CAACqB,KAAK,IAAI,EAAG;QAC1BL,QAAQ,EAAGC,CAAgC,IAAKhB,SAAS,CAAC;UAAC,GAAGD,MAAM;UAAEqB,KAAK,EAAEC,MAAM,CAACL,CAAC,CAACC,MAAM,CAACJ,KAAK;QAAC,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzG,CAAC,eACFb,OAAA;QACIe,KAAK,EAAC,eAAe;QACrBC,KAAK,EAAEd,MAAM,CAACuB,OAAQ;QACtBP,QAAQ,EAAGC,CAAgC,IAAKhB,SAAS,CAAC;UAAC,GAAGD,MAAM;UAAEuB,OAAO,EAAEN,CAAC,CAACC,MAAM,CAACJ;QAAK,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnG,CAAC,eACFb,OAAA;QAAM0B,SAAS,EAAC,OAAO;QAAAjB,QAAA,EAAEJ;MAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtCb,OAAA;QAAQ0B,SAAS,EAAE,gBAAiB;QAACJ,IAAI,EAAE,QAAS;QAAAb,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAE3B,CAAC;AAACc,EAAA,GAvCI1B,eAAyC;AAyC/C,eAAeA,eAAe;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}