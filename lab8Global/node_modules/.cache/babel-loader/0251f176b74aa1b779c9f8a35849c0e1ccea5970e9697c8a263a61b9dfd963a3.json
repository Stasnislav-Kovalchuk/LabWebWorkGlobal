{"ast":null,"code":"var _jsxFileName = \"/Users/stanislavkovalcuk/Desktop/github/LabWebWorkGlobal/lab8Global/src/components/pages/ItemPage/ItemPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport './ItemPage.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [doctor, setDoctor] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchDoctor = async () => {\n      setLoading(true);\n      try {\n        // Тут має бути реальний запит до API\n        // Для прикладу використовуємо фейкові дані\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        const fakeDoctor = {\n          id: id || '0',\n          name: `Doctor ${id}`\n          // Інші поля...\n        };\n        setDoctor(fakeDoctor);\n      } catch (err) {\n        setError('Failed to fetch doctor data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDoctor();\n  }, [id]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 21\n  }, this);\n  if (!doctor) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Doctor not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Doctor Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ID: \", doctor.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Name: \", doctor.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/catalog\",\n      children: \"Back to Catalog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(ItemPage, \"N6S9e7y5gGxJb3H+gcJTrV/lML0=\", false, function () {\n  return [useParams];\n});\n_c = ItemPage;\nexport default ItemPage;\nvar _c;\n$RefreshReg$(_c, \"ItemPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","jsxDEV","_jsxDEV","ItemPage","_s","id","doctor","setDoctor","loading","setLoading","error","setError","fetchDoctor","Promise","resolve","setTimeout","fakeDoctor","name","err","children","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/Users/stanislavkovalcuk/Desktop/github/LabWebWorkGlobal/lab8Global/src/components/pages/ItemPage/ItemPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport './ItemPage.scss';\n\ninterface Doctor {\n  id: string;\n  name: string;\n  // Інші поля...\n}\n\nconst ItemPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [doctor, setDoctor] = useState<Doctor | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchDoctor = async () => {\n      setLoading(true);\n      try {\n        // Тут має бути реальний запит до API\n        // Для прикладу використовуємо фейкові дані\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        const fakeDoctor: Doctor = {\n          id: id || '0',\n          name: `Doctor ${id}`,\n          // Інші поля...\n        };\n        setDoctor(fakeDoctor);\n      } catch (err) {\n        setError('Failed to fetch doctor data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchDoctor();\n  }, [id]);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!doctor) return <div>Doctor not found</div>;\n\n  return (\n    <div>\n      <h1>Doctor Details</h1>\n      <p>ID: {doctor.id}</p>\n      <p>Name: {doctor.name}</p>\n      {/* Інші деталі лікаря... */}\n      <Link to=\"/catalog\">Back to Catalog</Link>\n    </div>\n  );\n};\n\nexport default ItemPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQzB,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAiB,CAAC;EAC1C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;EACzD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9BH,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF;QACA;QACA,MAAM,IAAII,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QACvD,MAAME,UAAkB,GAAG;UACzBX,EAAE,EAAEA,EAAE,IAAI,GAAG;UACbY,IAAI,EAAE,UAAUZ,EAAE;UAClB;QACF,CAAC;QACDE,SAAS,CAACS,UAAU,CAAC;MACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZP,QAAQ,CAAC,6BAA6B,CAAC;MACzC,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC;EAER,IAAIG,OAAO,EAAE,oBAAON,OAAA;IAAAiB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACzC,IAAIb,KAAK,EAAE,oBAAOR,OAAA;IAAAiB,QAAA,GAAK,SAAO,EAACT,KAAK;EAAA;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAC3C,IAAI,CAACjB,MAAM,EAAE,oBAAOJ,OAAA;IAAAiB,QAAA,EAAK;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE/C,oBACErB,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBrB,OAAA;MAAAiB,QAAA,GAAG,MAAI,EAACb,MAAM,CAACD,EAAE;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBrB,OAAA;MAAAiB,QAAA,GAAG,QAAM,EAACb,MAAM,CAACW,IAAI;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE1BrB,OAAA,CAACF,IAAI;MAACwB,EAAE,EAAC,UAAU;MAAAL,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACnB,EAAA,CA1CID,QAAkB;EAAA,QACPJ,SAAS;AAAA;AAAA0B,EAAA,GADpBtB,QAAkB;AA4CxB,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}