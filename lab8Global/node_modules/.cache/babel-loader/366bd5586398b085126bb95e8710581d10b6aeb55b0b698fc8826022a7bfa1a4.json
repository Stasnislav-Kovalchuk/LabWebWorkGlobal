{"ast":null,"code":"var _jsxFileName = \"/Users/stanislavkovalcuk/Desktop/github/LabWebWorkGlobal/lab8Global/src/components/context/DoctorsContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useDoctors } from \"../context/DoctorsContext\";\nimport SectionMenu from './features/SectionMenu/SectionMenu';\nimport DoctorCard from './DoctorCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorsList = () => {\n  _s();\n  const {\n    doctors,\n    filters\n  } = useDoctors();\n  const [filteredDoctors, setFilteredDoctors] = useState(doctors);\n  const [term, setTerm] = useState('');\n  useEffect(() => {\n    const newFilteredDoctors = doctors.filter(doctor => {\n      const matchesPrice = !filters.price || doctor.price <= filters.price;\n      const matchesRating = !filters.rating || doctor.rating >= filters.rating;\n      const matchesCountry = !filters.country || doctor.location.toLowerCase() === filters.country.toLowerCase();\n      const matchesTerm = !term || doctor.name.toLowerCase().includes(term.toLowerCase()) || doctor.description.toLowerCase().includes(term.toLowerCase());\n      return matchesPrice && matchesRating && matchesCountry && matchesTerm;\n    });\n    setFilteredDoctors(newFilteredDoctors);\n  }, [doctors, filters, term]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SectionMenu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doctors-list\",\n      children: filteredDoctors.map(doctor => /*#__PURE__*/_jsxDEV(DoctorCard, {\n        doctor: doctor\n      }, doctor.doctor_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(DoctorsList, \"L4TDRx3wbgWZcgbhe24ybdTXUUY=\", false, function () {\n  return [useDoctors];\n});\n_c = DoctorsList;\nexport default DoctorsList;\nvar _c;\n$RefreshReg$(_c, \"DoctorsList\");","map":{"version":3,"names":["React","useState","useEffect","useDoctors","SectionMenu","DoctorCard","jsxDEV","_jsxDEV","DoctorsList","_s","doctors","filters","filteredDoctors","setFilteredDoctors","term","setTerm","newFilteredDoctors","filter","doctor","matchesPrice","price","matchesRating","rating","matchesCountry","country","location","toLowerCase","matchesTerm","name","includes","description","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","doctor_id","_c","$RefreshReg$"],"sources":["/Users/stanislavkovalcuk/Desktop/github/LabWebWorkGlobal/lab8Global/src/components/context/DoctorsContext.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDoctors } from \"../context/DoctorsContext\";\nimport SectionMenu from './features/SectionMenu/SectionMenu';\nimport DoctorCard from './DoctorCard';\nimport { IDoctor } from '../intefaces/doctorInterfaces';\n\nconst DoctorsList: React.FC = () => {\n    const { doctors, filters } = useDoctors();\n    const [filteredDoctors, setFilteredDoctors] = useState<IDoctor[]>(doctors);\n    const [term, setTerm] = useState('');\n\n    useEffect(() => {\n        const newFilteredDoctors = doctors.filter(doctor => {\n            const matchesPrice = !filters.price || doctor.price <= filters.price;\n            const matchesRating = !filters.rating || doctor.rating >= filters.rating;\n            const matchesCountry = !filters.country || doctor.location.toLowerCase() === filters.country.toLowerCase();\n            const matchesTerm = !term || doctor.name.toLowerCase().includes(term.toLowerCase()) || doctor.description.toLowerCase().includes(term.toLowerCase());\n\n            return matchesPrice && matchesRating && matchesCountry && matchesTerm;\n        });\n\n        setFilteredDoctors(newFilteredDoctors);\n    }, [doctors, filters, term]);\n\n    return (\n        <div>\n            <SectionMenu />\n            <div className=\"doctors-list\">\n                {filteredDoctors.map(doctor => (\n                    <DoctorCard key={doctor.doctor_id} doctor={doctor} />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default DoctorsList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,2BAA2B;AACtD,OAAOC,WAAW,MAAM,oCAAoC;AAC5D,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtC,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGR,UAAU,CAAC,CAAC;EACzC,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAYS,OAAO,CAAC;EAC1E,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACZ,MAAMc,kBAAkB,GAAGN,OAAO,CAACO,MAAM,CAACC,MAAM,IAAI;MAChD,MAAMC,YAAY,GAAG,CAACR,OAAO,CAACS,KAAK,IAAIF,MAAM,CAACE,KAAK,IAAIT,OAAO,CAACS,KAAK;MACpE,MAAMC,aAAa,GAAG,CAACV,OAAO,CAACW,MAAM,IAAIJ,MAAM,CAACI,MAAM,IAAIX,OAAO,CAACW,MAAM;MACxE,MAAMC,cAAc,GAAG,CAACZ,OAAO,CAACa,OAAO,IAAIN,MAAM,CAACO,QAAQ,CAACC,WAAW,CAAC,CAAC,KAAKf,OAAO,CAACa,OAAO,CAACE,WAAW,CAAC,CAAC;MAC1G,MAAMC,WAAW,GAAG,CAACb,IAAI,IAAII,MAAM,CAACU,IAAI,CAACF,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACf,IAAI,CAACY,WAAW,CAAC,CAAC,CAAC,IAAIR,MAAM,CAACY,WAAW,CAACJ,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACf,IAAI,CAACY,WAAW,CAAC,CAAC,CAAC;MAEpJ,OAAOP,YAAY,IAAIE,aAAa,IAAIE,cAAc,IAAII,WAAW;IACzE,CAAC,CAAC;IAEFd,kBAAkB,CAACG,kBAAkB,CAAC;EAC1C,CAAC,EAAE,CAACN,OAAO,EAAEC,OAAO,EAAEG,IAAI,CAAC,CAAC;EAE5B,oBACIP,OAAA;IAAAwB,QAAA,gBACIxB,OAAA,CAACH,WAAW;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACf5B,OAAA;MAAK6B,SAAS,EAAC,cAAc;MAAAL,QAAA,EACxBnB,eAAe,CAACyB,GAAG,CAACnB,MAAM,iBACvBX,OAAA,CAACF,UAAU;QAAwBa,MAAM,EAAEA;MAAO,GAAjCA,MAAM,CAACoB,SAAS;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CACvD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC1B,EAAA,CA5BID,WAAqB;EAAA,QACML,UAAU;AAAA;AAAAoC,EAAA,GADrC/B,WAAqB;AA8B3B,eAAeA,WAAW;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}